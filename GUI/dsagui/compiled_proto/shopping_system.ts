// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.19.1
// source: shopping_system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "shopping";

/** Request and response messages for checking user type */
export interface CheckUserTypeRequest {
  /** The unique identifier for the user */
  userId: string;
}

export interface CheckUserTypeResponse {
  /** "admin" or "customer" */
  userType: string;
}

/** Admin request and response messages */
export interface AddProductRequest {
  name: string;
  description: string;
  price: number;
  stockQuantity: number;
  sku: string;
  /** e.g., "available", "out_of_stock" */
  status: string;
}

export interface AddProductResponse {
  /** unique code for the added product */
  productCode: string;
}

export interface CreateUserRequest {
  userId: string;
  /** e.g., "customer", "admin" */
  userType: string;
  userName: string;
  email: string;
  password: string;
}

export interface CreateUsersResponse {
  /** success or failure */
  status: string;
}

export interface UpdateProductRequest {
  sku: string;
  name: string;
  description: string;
  price: number;
  stockQuantity: number;
  /** e.g., "available", "out_of_stock" */
  status: string;
}

export interface UpdateProductResponse {
  /** success or failure */
  status: string;
}

export interface RemoveProductRequest {
  sku: string;
}

export interface RemoveProductResponse {
  /** updated list of products after removal */
  products: Product[];
}

/** Customer request and response messages */
export interface ListAvailableProductsRequest {
}

export interface ListAvailableProductsResponse {
  products: Product[];
}

export interface SearchProductRequest {
  sku: string;
}

export interface SearchProductResponse {
  product?:
    | Product
    | undefined;
  /** error message if product is not found */
  message?: string | undefined;
}

export interface AddToCartRequest {
  userId: string;
  sku: string;
}

export interface AddToCartResponse {
  /** success or failure */
  status: string;
}

export interface RemoveFromCartRequest {
  sku: string;
}

export interface RemoveFromCartResponse {
  /** success or failure */
  status: string;
}

export interface ViewCartRequest {
  /** The unique identifier for the customer */
  userId: string;
}

export interface ViewCartResponse {
  /** List of products in the customer's cart */
  products: Product[];
}

export interface PlaceOrderRequest {
  userId: string;
}

export interface PlaceOrderResponse {
  /** unique order identifier */
  orderId: string;
  /** e.g., "order placed", "order failed" */
  status: string;
}

/** Product definition */
export interface Product {
  name: string;
  description: string;
  price: number;
  stockQuantity: number;
  sku: string;
  /** e.g., "available", "out_of_stock" */
  status: string;
}

export interface CartItem {
  userId: string;
  sku: string;
}

/** User definition */
export interface User {
  userId: string;
  userName: string;
  email: string;
  password: string;
  /** e.g., "customer", "admin" */
  userType: string;
}

function createBaseCheckUserTypeRequest(): CheckUserTypeRequest {
  return { userId: "" };
}

export const CheckUserTypeRequest: MessageFns<CheckUserTypeRequest> = {
  encode(message: CheckUserTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUserTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUserTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CheckUserTypeRequest>): CheckUserTypeRequest {
    return CheckUserTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckUserTypeRequest>): CheckUserTypeRequest {
    const message = createBaseCheckUserTypeRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCheckUserTypeResponse(): CheckUserTypeResponse {
  return { userType: "" };
}

export const CheckUserTypeResponse: MessageFns<CheckUserTypeResponse> = {
  encode(message: CheckUserTypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userType !== "") {
      writer.uint32(10).string(message.userType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUserTypeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUserTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CheckUserTypeResponse>): CheckUserTypeResponse {
    return CheckUserTypeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckUserTypeResponse>): CheckUserTypeResponse {
    const message = createBaseCheckUserTypeResponse();
    message.userType = object.userType ?? "";
    return message;
  },
};

function createBaseAddProductRequest(): AddProductRequest {
  return { name: "", description: "", price: 0, stockQuantity: 0, sku: "", status: "" };
}

export const AddProductRequest: MessageFns<AddProductRequest> = {
  encode(message: AddProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.price !== 0) {
      writer.uint32(29).float(message.price);
    }
    if (message.stockQuantity !== 0) {
      writer.uint32(32).int32(message.stockQuantity);
    }
    if (message.sku !== "") {
      writer.uint32(42).string(message.sku);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.price = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.stockQuantity = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sku = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProductRequest>): AddProductRequest {
    return AddProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProductRequest>): AddProductRequest {
    const message = createBaseAddProductRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.price = object.price ?? 0;
    message.stockQuantity = object.stockQuantity ?? 0;
    message.sku = object.sku ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseAddProductResponse(): AddProductResponse {
  return { productCode: "" };
}

export const AddProductResponse: MessageFns<AddProductResponse> = {
  encode(message: AddProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productCode !== "") {
      writer.uint32(10).string(message.productCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.productCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProductResponse>): AddProductResponse {
    return AddProductResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProductResponse>): AddProductResponse {
    const message = createBaseAddProductResponse();
    message.productCode = object.productCode ?? "";
    return message;
  },
};

function createBaseCreateUserRequest(): CreateUserRequest {
  return { userId: "", userType: "", userName: "", email: "", password: "" };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.userType !== "") {
      writer.uint32(18).string(message.userType);
    }
    if (message.userName !== "") {
      writer.uint32(26).string(message.userName);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.email = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateUserRequest>): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateUserRequest>): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.userId = object.userId ?? "";
    message.userType = object.userType ?? "";
    message.userName = object.userName ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseCreateUsersResponse(): CreateUsersResponse {
  return { status: "" };
}

export const CreateUsersResponse: MessageFns<CreateUsersResponse> = {
  encode(message: CreateUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateUsersResponse>): CreateUsersResponse {
    return CreateUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateUsersResponse>): CreateUsersResponse {
    const message = createBaseCreateUsersResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseUpdateProductRequest(): UpdateProductRequest {
  return { sku: "", name: "", description: "", price: 0, stockQuantity: 0, status: "" };
}

export const UpdateProductRequest: MessageFns<UpdateProductRequest> = {
  encode(message: UpdateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.price !== 0) {
      writer.uint32(37).float(message.price);
    }
    if (message.stockQuantity !== 0) {
      writer.uint32(40).int32(message.stockQuantity);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.price = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.stockQuantity = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProductRequest>): UpdateProductRequest {
    return UpdateProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProductRequest>): UpdateProductRequest {
    const message = createBaseUpdateProductRequest();
    message.sku = object.sku ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.price = object.price ?? 0;
    message.stockQuantity = object.stockQuantity ?? 0;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseUpdateProductResponse(): UpdateProductResponse {
  return { status: "" };
}

export const UpdateProductResponse: MessageFns<UpdateProductResponse> = {
  encode(message: UpdateProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProductResponse>): UpdateProductResponse {
    return UpdateProductResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProductResponse>): UpdateProductResponse {
    const message = createBaseUpdateProductResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseRemoveProductRequest(): RemoveProductRequest {
  return { sku: "" };
}

export const RemoveProductRequest: MessageFns<RemoveProductRequest> = {
  encode(message: RemoveProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProductRequest>): RemoveProductRequest {
    return RemoveProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProductRequest>): RemoveProductRequest {
    const message = createBaseRemoveProductRequest();
    message.sku = object.sku ?? "";
    return message;
  },
};

function createBaseRemoveProductResponse(): RemoveProductResponse {
  return { products: [] };
}

export const RemoveProductResponse: MessageFns<RemoveProductResponse> = {
  encode(message: RemoveProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProductResponse>): RemoveProductResponse {
    return RemoveProductResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProductResponse>): RemoveProductResponse {
    const message = createBaseRemoveProductResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAvailableProductsRequest(): ListAvailableProductsRequest {
  return {};
}

export const ListAvailableProductsRequest: MessageFns<ListAvailableProductsRequest> = {
  encode(_: ListAvailableProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAvailableProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAvailableProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAvailableProductsRequest>): ListAvailableProductsRequest {
    return ListAvailableProductsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListAvailableProductsRequest>): ListAvailableProductsRequest {
    const message = createBaseListAvailableProductsRequest();
    return message;
  },
};

function createBaseListAvailableProductsResponse(): ListAvailableProductsResponse {
  return { products: [] };
}

export const ListAvailableProductsResponse: MessageFns<ListAvailableProductsResponse> = {
  encode(message: ListAvailableProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAvailableProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAvailableProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAvailableProductsResponse>): ListAvailableProductsResponse {
    return ListAvailableProductsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAvailableProductsResponse>): ListAvailableProductsResponse {
    const message = createBaseListAvailableProductsResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSearchProductRequest(): SearchProductRequest {
  return { sku: "" };
}

export const SearchProductRequest: MessageFns<SearchProductRequest> = {
  encode(message: SearchProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SearchProductRequest>): SearchProductRequest {
    return SearchProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProductRequest>): SearchProductRequest {
    const message = createBaseSearchProductRequest();
    message.sku = object.sku ?? "";
    return message;
  },
};

function createBaseSearchProductResponse(): SearchProductResponse {
  return { product: undefined, message: undefined };
}

export const SearchProductResponse: MessageFns<SearchProductResponse> = {
  encode(message: SearchProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SearchProductResponse>): SearchProductResponse {
    return SearchProductResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchProductResponse>): SearchProductResponse {
    const message = createBaseSearchProductResponse();
    message.product = (object.product !== undefined && object.product !== null)
      ? Product.fromPartial(object.product)
      : undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBaseAddToCartRequest(): AddToCartRequest {
  return { userId: "", sku: "" };
}

export const AddToCartRequest: MessageFns<AddToCartRequest> = {
  encode(message: AddToCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.sku !== "") {
      writer.uint32(18).string(message.sku);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sku = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddToCartRequest>): AddToCartRequest {
    return AddToCartRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddToCartRequest>): AddToCartRequest {
    const message = createBaseAddToCartRequest();
    message.userId = object.userId ?? "";
    message.sku = object.sku ?? "";
    return message;
  },
};

function createBaseAddToCartResponse(): AddToCartResponse {
  return { status: "" };
}

export const AddToCartResponse: MessageFns<AddToCartResponse> = {
  encode(message: AddToCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddToCartResponse>): AddToCartResponse {
    return AddToCartResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddToCartResponse>): AddToCartResponse {
    const message = createBaseAddToCartResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseRemoveFromCartRequest(): RemoveFromCartRequest {
  return { sku: "" };
}

export const RemoveFromCartRequest: MessageFns<RemoveFromCartRequest> = {
  encode(message: RemoveFromCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(18).string(message.sku);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sku = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveFromCartRequest>): RemoveFromCartRequest {
    return RemoveFromCartRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveFromCartRequest>): RemoveFromCartRequest {
    const message = createBaseRemoveFromCartRequest();
    message.sku = object.sku ?? "";
    return message;
  },
};

function createBaseRemoveFromCartResponse(): RemoveFromCartResponse {
  return { status: "" };
}

export const RemoveFromCartResponse: MessageFns<RemoveFromCartResponse> = {
  encode(message: RemoveFromCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveFromCartResponse>): RemoveFromCartResponse {
    return RemoveFromCartResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveFromCartResponse>): RemoveFromCartResponse {
    const message = createBaseRemoveFromCartResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseViewCartRequest(): ViewCartRequest {
  return { userId: "" };
}

export const ViewCartRequest: MessageFns<ViewCartRequest> = {
  encode(message: ViewCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ViewCartRequest>): ViewCartRequest {
    return ViewCartRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ViewCartRequest>): ViewCartRequest {
    const message = createBaseViewCartRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseViewCartResponse(): ViewCartResponse {
  return { products: [] };
}

export const ViewCartResponse: MessageFns<ViewCartResponse> = {
  encode(message: ViewCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ViewCartResponse>): ViewCartResponse {
    return ViewCartResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ViewCartResponse>): ViewCartResponse {
    const message = createBaseViewCartResponse();
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlaceOrderRequest(): PlaceOrderRequest {
  return { userId: "" };
}

export const PlaceOrderRequest: MessageFns<PlaceOrderRequest> = {
  encode(message: PlaceOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PlaceOrderRequest>): PlaceOrderRequest {
    return PlaceOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaceOrderRequest>): PlaceOrderRequest {
    const message = createBasePlaceOrderRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBasePlaceOrderResponse(): PlaceOrderResponse {
  return { orderId: "", status: "" };
}

export const PlaceOrderResponse: MessageFns<PlaceOrderResponse> = {
  encode(message: PlaceOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<PlaceOrderResponse>): PlaceOrderResponse {
    return PlaceOrderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlaceOrderResponse>): PlaceOrderResponse {
    const message = createBasePlaceOrderResponse();
    message.orderId = object.orderId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseProduct(): Product {
  return { name: "", description: "", price: 0, stockQuantity: 0, sku: "", status: "" };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.price !== 0) {
      writer.uint32(29).float(message.price);
    }
    if (message.stockQuantity !== 0) {
      writer.uint32(32).int32(message.stockQuantity);
    }
    if (message.sku !== "") {
      writer.uint32(42).string(message.sku);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.price = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.stockQuantity = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sku = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Product>): Product {
    return Product.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Product>): Product {
    const message = createBaseProduct();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.price = object.price ?? 0;
    message.stockQuantity = object.stockQuantity ?? 0;
    message.sku = object.sku ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseCartItem(): CartItem {
  return { userId: "", sku: "" };
}

export const CartItem: MessageFns<CartItem> = {
  encode(message: CartItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.sku !== "") {
      writer.uint32(18).string(message.sku);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sku = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CartItem>): CartItem {
    return CartItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CartItem>): CartItem {
    const message = createBaseCartItem();
    message.userId = object.userId ?? "";
    message.sku = object.sku ?? "";
    return message;
  },
};

function createBaseUser(): User {
  return { userId: "", userName: "", email: "", password: "", userType: "" };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(18).string(message.userName);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.userType !== "") {
      writer.uint32(42).string(message.userType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.userType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = createBaseUser();
    message.userId = object.userId ?? "";
    message.userName = object.userName ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.userType = object.userType ?? "";
    return message;
  },
};

export type ShoppingServiceDefinition = typeof ShoppingServiceDefinition;
export const ShoppingServiceDefinition = {
  name: "ShoppingService",
  fullName: "shopping.ShoppingService",
  methods: {
    /** Admin functions */
    addProduct: {
      name: "AddProduct",
      requestType: AddProductRequest,
      requestStream: false,
      responseType: AddProductResponse,
      responseStream: false,
      options: {},
    },
    createUsers: {
      name: "CreateUsers",
      requestType: CreateUserRequest,
      requestStream: true,
      responseType: CreateUsersResponse,
      responseStream: false,
      options: {},
    },
    updateProduct: {
      name: "UpdateProduct",
      requestType: UpdateProductRequest,
      requestStream: false,
      responseType: UpdateProductResponse,
      responseStream: false,
      options: {},
    },
    removeProduct: {
      name: "RemoveProduct",
      requestType: RemoveProductRequest,
      requestStream: false,
      responseType: RemoveProductResponse,
      responseStream: false,
      options: {},
    },
    /** Customer functions */
    listAvailableProducts: {
      name: "ListAvailableProducts",
      requestType: ListAvailableProductsRequest,
      requestStream: false,
      responseType: ListAvailableProductsResponse,
      responseStream: false,
      options: {},
    },
    searchProduct: {
      name: "SearchProduct",
      requestType: SearchProductRequest,
      requestStream: false,
      responseType: SearchProductResponse,
      responseStream: false,
      options: {},
    },
    addToCart: {
      name: "AddToCart",
      requestType: AddToCartRequest,
      requestStream: false,
      responseType: AddToCartResponse,
      responseStream: false,
      options: {},
    },
    removeFromCart: {
      name: "RemoveFromCart",
      requestType: RemoveFromCartRequest,
      requestStream: false,
      responseType: RemoveFromCartResponse,
      responseStream: false,
      options: {},
    },
    /** New RPC to view cart contents */
    viewCart: {
      name: "ViewCart",
      requestType: ViewCartRequest,
      requestStream: false,
      responseType: ViewCartResponse,
      responseStream: false,
      options: {},
    },
    placeOrder: {
      name: "PlaceOrder",
      requestType: PlaceOrderRequest,
      requestStream: false,
      responseType: PlaceOrderResponse,
      responseStream: false,
      options: {},
    },
    /** New function to check user type */
    checkUserType: {
      name: "CheckUserType",
      requestType: CheckUserTypeRequest,
      requestStream: false,
      responseType: CheckUserTypeResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ShoppingServiceImplementation<CallContextExt = {}> {
  /** Admin functions */
  addProduct(
    request: AddProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddProductResponse>>;
  createUsers(
    request: AsyncIterable<CreateUserRequest>,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateUsersResponse>>;
  updateProduct(
    request: UpdateProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateProductResponse>>;
  removeProduct(
    request: RemoveProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveProductResponse>>;
  /** Customer functions */
  listAvailableProducts(
    request: ListAvailableProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAvailableProductsResponse>>;
  searchProduct(
    request: SearchProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchProductResponse>>;
  addToCart(request: AddToCartRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddToCartResponse>>;
  removeFromCart(
    request: RemoveFromCartRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveFromCartResponse>>;
  /** New RPC to view cart contents */
  viewCart(request: ViewCartRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ViewCartResponse>>;
  placeOrder(
    request: PlaceOrderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PlaceOrderResponse>>;
  /** New function to check user type */
  checkUserType(
    request: CheckUserTypeRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CheckUserTypeResponse>>;
}

export interface ShoppingServiceClient<CallOptionsExt = {}> {
  /** Admin functions */
  addProduct(
    request: DeepPartial<AddProductRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProductResponse>;
  createUsers(
    request: AsyncIterable<DeepPartial<CreateUserRequest>>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateUsersResponse>;
  updateProduct(
    request: DeepPartial<UpdateProductRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProductResponse>;
  removeProduct(
    request: DeepPartial<RemoveProductRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProductResponse>;
  /** Customer functions */
  listAvailableProducts(
    request: DeepPartial<ListAvailableProductsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAvailableProductsResponse>;
  searchProduct(
    request: DeepPartial<SearchProductRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchProductResponse>;
  addToCart(request: DeepPartial<AddToCartRequest>, options?: CallOptions & CallOptionsExt): Promise<AddToCartResponse>;
  removeFromCart(
    request: DeepPartial<RemoveFromCartRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveFromCartResponse>;
  /** New RPC to view cart contents */
  viewCart(request: DeepPartial<ViewCartRequest>, options?: CallOptions & CallOptionsExt): Promise<ViewCartResponse>;
  placeOrder(
    request: DeepPartial<PlaceOrderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PlaceOrderResponse>;
  /** New function to check user type */
  checkUserType(
    request: DeepPartial<CheckUserTypeRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CheckUserTypeResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
