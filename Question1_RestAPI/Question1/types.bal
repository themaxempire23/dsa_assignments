// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type Course record {
    # The name of the course
    string courseName;
    # The code of the course
    string courseCode;
    # The NQF level of the course
    int nqfLevel;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

public type Programme record {
    # The unique identifier for a programme
    readonly string programmeCode;
    # The NQF level of the programme
    int nqfLevel;
    # The name of the faculty to which the programme belongs
    string faculty;
    # The name of the department to which the programme belongs
    string department;
    # The title of the programme or qualification
    string title;
    # The registration date of the programme
    string registrationDate;
    # A list of courses that the programme comprises
    Course[] courses;
};

public type InvalidProgrammeCodeError record {|
    *http:NotFound;
    ErrorMsg body;
|};

public type ConflictingProgrammeCodeError record {|
    *http:Conflict;
    ErrorMsg body;
|};

public type ErrorMsg record {|
    string errmsg;
|};

public final table<Programme> key(programmeCode) ProgrammeTable = table [
    {
        programmeCode: "CSBSC001",
        nqfLevel: 7,
        faculty: "Faculty of Computing",
        department: "Department of Computer Science",
        title: "Bachelor of Science in Computer Science",
        registrationDate: "2023-01-15T00:00:00Z", // Updated format
        courses: [
            {
                courseName: "Introduction to Programming",
                courseCode: "CS101",
                nqfLevel: 4
            },
            {
                courseName: "Data Structures",
                courseCode: "CS102",
                nqfLevel: 5
            },
            {
                courseName: "Database Systems",
                courseCode: "CS103",
                nqfLevel: 6
            }
        ]
    },
    {
        programmeCode: "ITBSC002",
        nqfLevel: 6,
        faculty: "Faculty of Computing",
        department: "Department of Information Technology",
        title: "Bachelor of Science in Information Technology",
        registrationDate: "2022-09-01T00:00:00Z", // Updated format
        courses: [
            {
                courseName: "Introduction to Programming",
                courseCode: "CS101",
                nqfLevel: 4
            },
            {
                courseName: "Networking Fundamentals",
                courseCode: "IT201",
                nqfLevel: 5
            }
        ]
    },
    {
        programmeCode: "CSBSC002",
        nqfLevel: 7,
        faculty: "Faculty of Computing",
        department: "Department of Computer Science",
        title: "Bachelor of Science in Software Engineering",
        registrationDate: "2018-01-15T00:00:00Z", // Updated format, more than 5 years ago
        courses: [
            {
                courseName: "Software Development",
                courseCode: "SE101",
                nqfLevel: 4
            },
            {
                courseName: "Advanced Algorithms",
                courseCode: "SE102",
                nqfLevel: 5
            },
            {
                courseName: "Software Engineering Practices",
                courseCode: "SE103",
                nqfLevel: 6
            }
        ]
    }
];

